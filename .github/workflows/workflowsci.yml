name: Node.js CI

on: [push, pull_request]

jobs:
  ci:
    runs-on: ubuntu-latest

    permissions:
      contents: read
      packages: write
      attestations: write
      id-token: write

    services:
      mariadb:
        image: mariadb:latest
        env:
          MARIADB_ROOT_PASSWORD: root
          MARIADB_DATABASE: tickets_db
          MARIADB_USER: root
        ports:
          - 3306:3306
        healthcheck:
          test: ['CMD', 'mariadb-admin', 'ping', '-h', 'localhost']
          interval: 10s
          timeout: 5s
          retries: 5

    env:
      MARIADB_HOST: localhost
      MARIADB_PORT: 3306
      MARIADB_USER: root
      MARIADB_ROOT_PASSWORD: root
      MARIADB_DATABASE: tickets_db
      ADMIN_USER: admin
      ADMIN_PASSWORD: password

    steps:
      - uses: actions/checkout@v4

      - uses: pnpm/action-setup@v4
        name: Install pnpm
        with:
          run_install: false

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 22
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install

      - name: Lint
        run: pnpm lint

      - name: Run tests
        run: pnpm test

      - name: Install Playwright Browsers
        run: pnpm exec playwright install --with-deps

      - name: Seed database
        run: pnpm seed

      - name: Run Playwright tests
        run: pnpm test:e2e

      - uses: actions/upload-artifact@v4
        if: ${{ !cancelled() }}
        with:
          name: playwright-report
          path: playwright-report/
          retention-days: 30

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results
          path: test-results/
          retention-days: 30

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Deploy to remote server via SSH
        continue-on-error: true
        run: |
          # Setup SSH key
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H ${{ secrets.SERVER_HOST }} >> ~/.ssh/known_hosts

          # Get the image tag
          IMAGE_TAG=$(echo "${{ steps.meta.outputs.tags }}" | head -n1)
          echo "Deploying image: $IMAGE_TAG"

          # Connect to server and deploy
          ssh -i ~/.ssh/id_rsa ${{ secrets.SSH_USER }}@${{ secrets.SERVER_HOST }} << EOF
            echo "Connected to server, updating application..."

            # Login to GitHub Container Registry
            echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin

            # Pull the latest image
            echo "Pulling latest image: $IMAGE_TAG"
            docker pull $IMAGE_TAG

            # Stop and remove existing container
            docker stop app-container 2>/dev/null || true
            docker rm app-container 2>/dev/null || true

            # Run the new container
            echo "Starting new container..."
            docker run -d \
              --name app-container \
              -p 3000:3000 \
              --restart unless-stopped \
              -e MARIADB_HOST=${{ secrets.MARIADB_HOST }} \
              -e MARIADB_PORT=${{ secrets.MARIADB_PORT }} \
              -e MARIADB_USER=${{ secrets.MARIADB_USER }} \
              -e MARIADB_ROOT_PASSWORD=${{ secrets.MARIADB_ROOT_PASSWORD }} \
              -e MARIADB_DATABASE=${{ secrets.MARIADB_DATABASE }} \
              -e ADMIN_USER=${{ secrets.ADMIN_USER }} \
              -e ADMIN_PASSWORD=${{ secrets.ADMIN_PASSWORD }} \
              $IMAGE_TAG

            # Wait for container to start
            sleep 5

            # Check deployment status
            echo "Deployment status:"
            docker ps | grep app-container || echo "Container not running"

            # Clean up old images
            docker image prune -f

            echo "Deployment completed successfully!"
          EOF
